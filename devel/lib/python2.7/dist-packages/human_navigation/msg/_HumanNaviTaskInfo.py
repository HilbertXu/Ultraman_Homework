# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from human_navigation/HumanNaviTaskInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import human_navigation.msg

class HumanNaviTaskInfo(genpy.Message):
  _md5sum = "a171437ef155a1af48679c78f18cbc7d"
  _type = "human_navigation/HumanNaviTaskInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string environment_id
HumanNaviObjectInfo[] objects_info
HumanNaviObjectInfo target_object
geometry_msgs/Point destination

================================================================================
MSG: human_navigation/HumanNaviObjectInfo
string name
geometry_msgs/Point position

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['environment_id','objects_info','target_object','destination']
  _slot_types = ['string','human_navigation/HumanNaviObjectInfo[]','human_navigation/HumanNaviObjectInfo','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       environment_id,objects_info,target_object,destination

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HumanNaviTaskInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.environment_id is None:
        self.environment_id = ''
      if self.objects_info is None:
        self.objects_info = []
      if self.target_object is None:
        self.target_object = human_navigation.msg.HumanNaviObjectInfo()
      if self.destination is None:
        self.destination = geometry_msgs.msg.Point()
    else:
      self.environment_id = ''
      self.objects_info = []
      self.target_object = human_navigation.msg.HumanNaviObjectInfo()
      self.destination = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.environment_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects_info:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.target_object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.target_object.position.x, _x.target_object.position.y, _x.target_object.position.z, _x.destination.x, _x.destination.y, _x.destination.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.objects_info is None:
        self.objects_info = None
      if self.target_object is None:
        self.target_object = human_navigation.msg.HumanNaviObjectInfo()
      if self.destination is None:
        self.destination = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.environment_id = str[start:end].decode('utf-8')
      else:
        self.environment_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects_info = []
      for i in range(0, length):
        val1 = human_navigation.msg.HumanNaviObjectInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _v2 = val1.position
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.objects_info.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_object.name = str[start:end].decode('utf-8')
      else:
        self.target_object.name = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.target_object.position.x, _x.target_object.position.y, _x.target_object.position.z, _x.destination.x, _x.destination.y, _x.destination.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.environment_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects_info:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.target_object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.target_object.position.x, _x.target_object.position.y, _x.target_object.position.z, _x.destination.x, _x.destination.y, _x.destination.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.objects_info is None:
        self.objects_info = None
      if self.target_object is None:
        self.target_object = human_navigation.msg.HumanNaviObjectInfo()
      if self.destination is None:
        self.destination = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.environment_id = str[start:end].decode('utf-8')
      else:
        self.environment_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects_info = []
      for i in range(0, length):
        val1 = human_navigation.msg.HumanNaviObjectInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.objects_info.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_object.name = str[start:end].decode('utf-8')
      else:
        self.target_object.name = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.target_object.position.x, _x.target_object.position.y, _x.target_object.position.z, _x.destination.x, _x.destination.y, _x.destination.z,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
